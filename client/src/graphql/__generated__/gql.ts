/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation addRole($input: AddRoleUserInput!) {\n    addRole(addRoleUserInput: $input) {\n      id\n    }\n  }\n": types.AddRoleDocument,
    "\n  mutation unbanUser($input: String!) {\n    unbanUser(userEmail: $input) {\n      id\n    }\n  }\n": types.UnbanUserDocument,
    "\n  query getAllUsers {\n    getAllUsers {\n      id\n      name\n      email\n      picture\n      isBanned\n      canSendReport\n      createdAt\n    }\n  }\n": types.GetAllUsersDocument,
    "\n  mutation Login($input: LoginUserInput!) {\n    login(loginUserInput: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Registration($input: RegistrationInput!) {\n    registration(registrationInput: $input) {\n      success\n    }\n  }\n": types.RegistrationDocument,
    "\n  mutation forgotPassword($input: String!) {\n    forgotPassword(email: $input) {\n      success\n    }\n  }\n": types.ForgotPasswordDocument,
    "\n  mutation resetPassword($input: ResetPasswordInput!) {\n    resetPassword(resetPasswordInput: $input) {\n      success\n    }\n  }\n": types.ResetPasswordDocument,
    "\n  mutation activate($input: String!) {\n    activate(link: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n": types.ActivateDocument,
    "\n  mutation Refresh {\n    refresh {\n      token\n    }\n  }\n": types.RefreshDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": types.LogoutDocument,
    "\n  query downloadFileByLink($input: String!) {\n    downloadFileByLink(url: $input) {\n      link\n    }\n  }\n": types.DownloadFileByLinkDocument,
    "\n  query getUserFollowers {\n    getUserFollowers {\n      id\n      name\n      picture\n    }\n  }\n": types.GetUserFollowersDocument,
    "\n  query getUserFollows {\n    getUserFollows {\n      id\n      name\n      picture\n    }\n  }\n": types.GetUserFollowsDocument,
    "\n  mutation removeFollow($input: String!) {\n    removeFollow(followId: $input) {\n      success\n    }\n  }\n": types.RemoveFollowDocument,
    "\n  mutation addFollow($input: String!) {\n    addFollow(followId: $input) {\n      success\n    }\n  }\n": types.AddFollowDocument,
    "\n  query getFollowInfo($input: GetFollowInput!) {\n    getFollowInfo(getFollowInput: $input) {\n      id\n      name\n      picture\n      note\n      filmCount\n      seriesCount\n      comicsCount\n      bookCount\n      follow\n    }\n  }\n": types.GetFollowInfoDocument,
    "\n  query getProfileInfo {\n    getProfileInfo {\n      note\n      followerCount\n      followingCount\n      mediaCount\n      mediaStats {\n        films {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          movie {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        series {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          tv {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        comics {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          comics {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          graphicNovel {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manga {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manhwa {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        books {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          fiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          nonFiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n      }\n    }\n  }\n": types.GetProfileInfoDocument,
    "\n  mutation deleteMediaFromCollection($input: String!) {\n    deleteMediaFromCollection(mediaId: $input) {\n      success\n    }\n  }\n": types.DeleteMediaFromCollectionDocument,
    "\n  query getFollowsMedia($input: GetFollowsMediaInput!) {\n    getFollowsMedia(getFollowsMediaInput: $input) {\n      user {\n        id\n        name\n        picture\n      }\n      userMedia {\n        updatedAt\n        changed\n        watched\n        rate\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          image\n          year\n          directedBy\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          seriesType\n          title\n          image\n          startYear\n          endYear\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          image\n          startYear\n          endYear\n          author\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          image\n          author\n          year\n        }\n      }\n    }\n  }\n": types.GetFollowsMediaDocument,
    "\n  query getNearMedia($input: GetNearestMediaInput!) {\n    getNearMedia(getNearestMediaInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        media\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        media\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        media\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        media\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n": types.GetNearMediaDocument,
    "\n  query embeddingSearch($input: EmbeddingSearchInput!) {\n    embeddingSearch(embeddingSearchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n": types.EmbeddingSearchDocument,
    "\n  query getGenres($input: GetGenresInput!) {\n    getGenres(getGenresInput: $input) {\n      genres\n    }\n  }\n": types.GetGenresDocument,
    "\n  mutation updateUserMedia($input: UpdateUserMediaInput!) {\n    updateUserMedia(updateUserMediaInput: $input) {\n      success\n    }\n  }\n": types.UpdateUserMediaDocument,
    "\n  mutation addMediaToUser($input: AddMediaInput!) {\n    addMediaToUser(addMediaInput: $input) {\n      success\n    }\n  }\n": types.AddMediaToUserDocument,
    "\n  mutation addReport($input: AddReportInput!) {\n    addReport(addReportInput: $input) {\n      success\n    }\n  }\n": types.AddReportDocument,
    "\n  query getRandomMedia($input: GetRandomMediaInput!) {\n    getRandomMedia(getRandomMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n      }\n      ... on SeriesBaseResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n      }\n    }\n  }\n": types.GetRandomMediaDocument,
    "\n  query getUserMedia($input: GetUserMediaInput!) {\n    getUserMedia(getUserMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n        rate\n        watched\n      }\n    }\n  }\n": types.GetUserMediaDocument,
    "\n  query getMedia($input: GetMediaInput!) {\n    getMedia(getMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n          rate\n        }\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n    }\n  }\n": types.GetMediaDocument,
    "\n  query searchMedia($input: SearchInput!) {\n    searchMedia(searchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n": types.SearchMediaDocument,
    "\n  mutation createMedia($input: CreateMediaInput!) {\n    createMedia(createMediaInput: $input) {\n      success\n    }\n  }\n": types.CreateMediaDocument,
    "\n  mutation deleteReport($input: String!) {\n    deleteReport(reportId: $input) {\n      success\n    }\n  }\n": types.DeleteReportDocument,
    "\n  mutation banUser($input: BanUserInput!) {\n    banUser(banUserInput: $input) {\n      id\n    }\n  }\n": types.BanUserDocument,
    "\n  mutation banReportsUser($input: String!) {\n    banReportsUser(userId: $input) {\n      id\n    }\n  }\n": types.BanReportsUserDocument,
    "\n  mutation acceptWarning($input: WarningInput!) {\n    acceptWarning(warningInput: $input) {\n      success\n    }\n  }\n": types.AcceptWarningDocument,
    "\n  query getModerEditMedia($input: GetModerEditMediaInput!) {\n    getModerEditMedia(getModerEditMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n      }\n      ... on SeriesModerResponse {\n        id\n        media\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n        }\n        genres\n        tags\n        image\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n      }\n    }\n  }\n": types.GetModerEditMediaDocument,
    "\n  mutation acceptModerMedia($input: AcceptModerMediaInput!) {\n    acceptModerMedia(acceptModerMediaInput: $input) {\n      success\n    }\n  }\n": types.AcceptModerMediaDocument,
    "\n  query getModerReportNote {\n    getModerReportNote {\n      reportId\n      mediaId\n      note\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n": types.GetModerReportNoteDocument,
    "\n  query getModerReportAccount {\n    getModerReportAccount {\n      reportId\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n": types.GetModerReportAccountDocument,
    "\n  query getModerReportMedia {\n    getModerReportMedia {\n      report\n      reportId\n      createdType\n      informer {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n": types.GetModerReportMediaDocument,
    "\n  query getModerMedia {\n    getModerMedia {\n      report\n      createdType\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      searchMedia {\n        ... on FilmBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n": types.GetModerMediaDocument,
    "\n  query getModerMediaCount {\n    getModerMediaCount {\n      reportsCount {\n        note\n        account\n        media\n      }\n      mediaCount\n    }\n  }\n": types.GetModerMediaCountDocument,
    "\n  query gptTitleParse($input: QueryInput!) {\n    gptTitleParse(queryInput: $input) {\n      title\n      year\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n": types.GptTitleParseDocument,
    "\n  query wikiMediaParse($input: QueryInput!) {\n    wikiMediaParse(queryInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n": types.WikiMediaParseDocument,
    "\n  query imageParse($input: ImagesInput!) {\n    imageParse(imagesInput: $input) {\n      links\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n": types.ImageParseDocument,
    "\n  query gptMediaParse($input: GptInput!) {\n    gptMediaParse(gptInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n": types.GptMediaParseDocument,
    "\n  mutation updateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      success\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation setAllWatchedNotifications {\n    setAllWatchedNotifications {\n      success\n    }\n  }\n": types.SetAllWatchedNotificationsDocument,
    "\n  query getUserNotifications {\n    getUserNotifications {\n      id\n      type\n      notification\n      isWatched\n      createdAt\n      follower {\n        id\n        name\n        picture\n        follow\n      }\n    }\n  }\n": types.GetUserNotificationsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addRole($input: AddRoleUserInput!) {\n    addRole(addRoleUserInput: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation addRole($input: AddRoleUserInput!) {\n    addRole(addRoleUserInput: $input) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation unbanUser($input: String!) {\n    unbanUser(userEmail: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation unbanUser($input: String!) {\n    unbanUser(userEmail: $input) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAllUsers {\n    getAllUsers {\n      id\n      name\n      email\n      picture\n      isBanned\n      canSendReport\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query getAllUsers {\n    getAllUsers {\n      id\n      name\n      email\n      picture\n      isBanned\n      canSendReport\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Login($input: LoginUserInput!) {\n    login(loginUserInput: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginUserInput!) {\n    login(loginUserInput: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Registration($input: RegistrationInput!) {\n    registration(registrationInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Registration($input: RegistrationInput!) {\n    registration(registrationInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation forgotPassword($input: String!) {\n    forgotPassword(email: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation forgotPassword($input: String!) {\n    forgotPassword(email: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation resetPassword($input: ResetPasswordInput!) {\n    resetPassword(resetPasswordInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation resetPassword($input: ResetPasswordInput!) {\n    resetPassword(resetPasswordInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation activate($input: String!) {\n    activate(link: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation activate($input: String!) {\n    activate(link: $input) {\n      id\n      email\n      picture\n      name\n      token\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Refresh {\n    refresh {\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation Refresh {\n    refresh {\n      token\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query downloadFileByLink($input: String!) {\n    downloadFileByLink(url: $input) {\n      link\n    }\n  }\n"): (typeof documents)["\n  query downloadFileByLink($input: String!) {\n    downloadFileByLink(url: $input) {\n      link\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserFollowers {\n    getUserFollowers {\n      id\n      name\n      picture\n    }\n  }\n"): (typeof documents)["\n  query getUserFollowers {\n    getUserFollowers {\n      id\n      name\n      picture\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserFollows {\n    getUserFollows {\n      id\n      name\n      picture\n    }\n  }\n"): (typeof documents)["\n  query getUserFollows {\n    getUserFollows {\n      id\n      name\n      picture\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation removeFollow($input: String!) {\n    removeFollow(followId: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation removeFollow($input: String!) {\n    removeFollow(followId: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addFollow($input: String!) {\n    addFollow(followId: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation addFollow($input: String!) {\n    addFollow(followId: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getFollowInfo($input: GetFollowInput!) {\n    getFollowInfo(getFollowInput: $input) {\n      id\n      name\n      picture\n      note\n      filmCount\n      seriesCount\n      comicsCount\n      bookCount\n      follow\n    }\n  }\n"): (typeof documents)["\n  query getFollowInfo($input: GetFollowInput!) {\n    getFollowInfo(getFollowInput: $input) {\n      id\n      name\n      picture\n      note\n      filmCount\n      seriesCount\n      comicsCount\n      bookCount\n      follow\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getProfileInfo {\n    getProfileInfo {\n      note\n      followerCount\n      followingCount\n      mediaCount\n      mediaStats {\n        films {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          movie {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        series {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          tv {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        comics {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          comics {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          graphicNovel {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manga {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manhwa {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        books {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          fiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          nonFiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProfileInfo {\n    getProfileInfo {\n      note\n      followerCount\n      followingCount\n      mediaCount\n      mediaStats {\n        films {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          movie {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        series {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          animated {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          anime {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          tv {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        comics {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          comics {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          graphicNovel {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manga {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          manhwa {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n        books {\n          all {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          fiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n          nonFiction {\n            allCount\n            completedCount\n            plannedCount\n            abandonedCount\n            pausedCount\n            reviewingCount\n            viewingCount\n            averageRating\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation deleteMediaFromCollection($input: String!) {\n    deleteMediaFromCollection(mediaId: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation deleteMediaFromCollection($input: String!) {\n    deleteMediaFromCollection(mediaId: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getFollowsMedia($input: GetFollowsMediaInput!) {\n    getFollowsMedia(getFollowsMediaInput: $input) {\n      user {\n        id\n        name\n        picture\n      }\n      userMedia {\n        updatedAt\n        changed\n        watched\n        rate\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          image\n          year\n          directedBy\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          seriesType\n          title\n          image\n          startYear\n          endYear\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          image\n          startYear\n          endYear\n          author\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          image\n          author\n          year\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getFollowsMedia($input: GetFollowsMediaInput!) {\n    getFollowsMedia(getFollowsMediaInput: $input) {\n      user {\n        id\n        name\n        picture\n      }\n      userMedia {\n        updatedAt\n        changed\n        watched\n        rate\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          image\n          year\n          directedBy\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          seriesType\n          title\n          image\n          startYear\n          endYear\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          image\n          startYear\n          endYear\n          author\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          image\n          author\n          year\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getNearMedia($input: GetNearestMediaInput!) {\n    getNearMedia(getNearestMediaInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        media\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        media\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        media\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        media\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query getNearMedia($input: GetNearestMediaInput!) {\n    getNearMedia(getNearestMediaInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        media\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        media\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        media\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        media\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query embeddingSearch($input: EmbeddingSearchInput!) {\n    embeddingSearch(embeddingSearchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query embeddingSearch($input: EmbeddingSearchInput!) {\n    embeddingSearch(embeddingSearchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGenres($input: GetGenresInput!) {\n    getGenres(getGenresInput: $input) {\n      genres\n    }\n  }\n"): (typeof documents)["\n  query getGenres($input: GetGenresInput!) {\n    getGenres(getGenresInput: $input) {\n      genres\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserMedia($input: UpdateUserMediaInput!) {\n    updateUserMedia(updateUserMediaInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserMedia($input: UpdateUserMediaInput!) {\n    updateUserMedia(updateUserMediaInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addMediaToUser($input: AddMediaInput!) {\n    addMediaToUser(addMediaInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation addMediaToUser($input: AddMediaInput!) {\n    addMediaToUser(addMediaInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addReport($input: AddReportInput!) {\n    addReport(addReportInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation addReport($input: AddReportInput!) {\n    addReport(addReportInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRandomMedia($input: GetRandomMediaInput!) {\n    getRandomMedia(getRandomMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n      }\n      ... on SeriesBaseResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRandomMedia($input: GetRandomMediaInput!) {\n    getRandomMedia(getRandomMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n      }\n      ... on SeriesBaseResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserMedia($input: GetUserMediaInput!) {\n    getUserMedia(getUserMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n        rate\n        watched\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUserMedia($input: GetUserMediaInput!) {\n    getUserMedia(getUserMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        media\n        filmType\n        title\n        country\n        genres\n        image\n        year\n        directedBy\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        media\n        seriesType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        media\n        comicsType\n        title\n        country\n        genres\n        image\n        startYear\n        endYear\n        author\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        media\n        bookType\n        title\n        country\n        genres\n        image\n        author\n        year\n        rate\n        watched\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getMedia($input: GetMediaInput!) {\n    getMedia(getMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n          rate\n        }\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMedia($input: GetMediaInput!) {\n    getMedia(getMediaInput: $input) {\n      ... on FilmMediaResponse {\n        id\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on SeriesMediaResponse {\n        id\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n          rate\n        }\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on ComicsMediaResponse {\n        id\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n      ... on BookMediaResponse {\n        id\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n        inUserMedia\n        isPublic\n        note\n        rate\n        watched\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query searchMedia($input: SearchInput!) {\n    searchMedia(searchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query searchMedia($input: SearchInput!) {\n    searchMedia(searchInput: $input) {\n      ... on FilmSearchResponse {\n        id\n        filmType\n        title\n        image\n        inUserMedia\n        year\n        directedBy\n      }\n      ... on SeriesSearchResponse {\n        id\n        seriesType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n      }\n      ... on ComicsSearchResponse {\n        id\n        comicsType\n        title\n        image\n        inUserMedia\n        startYear\n        endYear\n        author\n      }\n      ... on BookSearchResponse {\n        id\n        bookType\n        title\n        image\n        inUserMedia\n        author\n        year\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createMedia($input: CreateMediaInput!) {\n    createMedia(createMediaInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation createMedia($input: CreateMediaInput!) {\n    createMedia(createMediaInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation deleteReport($input: String!) {\n    deleteReport(reportId: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation deleteReport($input: String!) {\n    deleteReport(reportId: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation banUser($input: BanUserInput!) {\n    banUser(banUserInput: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation banUser($input: BanUserInput!) {\n    banUser(banUserInput: $input) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation banReportsUser($input: String!) {\n    banReportsUser(userId: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation banReportsUser($input: String!) {\n    banReportsUser(userId: $input) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation acceptWarning($input: WarningInput!) {\n    acceptWarning(warningInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation acceptWarning($input: WarningInput!) {\n    acceptWarning(warningInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerEditMedia($input: GetModerEditMediaInput!) {\n    getModerEditMedia(getModerEditMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n      }\n      ... on SeriesModerResponse {\n        id\n        media\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n        }\n        genres\n        tags\n        image\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n      }\n    }\n  }\n"): (typeof documents)["\n  query getModerEditMedia($input: GetModerEditMediaInput!) {\n    getModerEditMedia(getModerEditMediaInput: $input) {\n      ... on FilmBaseResponse {\n        id\n        media\n        filmType\n        title\n        year\n        country\n        plot\n        language\n        directedBy\n        starring\n        runTime\n        boxOffice\n        budget\n        genres\n        tags\n        image\n      }\n      ... on SeriesModerResponse {\n        id\n        media\n        seriesType\n        title\n        startYear\n        endYear\n        country\n        plot\n        language\n        directedBy\n        seasons {\n          id\n          season\n          title\n          episodes\n        }\n        genres\n        tags\n        image\n      }\n      ... on ComicsBaseResponse {\n        id\n        media\n        comicsType\n        title\n        author\n        startYear\n        endYear\n        country\n        description\n        language\n        volumes\n        genres\n        tags\n        image\n      }\n      ... on BookBaseResponse {\n        id\n        media\n        bookType\n        title\n        author\n        year\n        country\n        description\n        language\n        pages\n        genres\n        tags\n        image\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation acceptModerMedia($input: AcceptModerMediaInput!) {\n    acceptModerMedia(acceptModerMediaInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation acceptModerMedia($input: AcceptModerMediaInput!) {\n    acceptModerMedia(acceptModerMediaInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerReportNote {\n    getModerReportNote {\n      reportId\n      mediaId\n      note\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n"): (typeof documents)["\n  query getModerReportNote {\n    getModerReportNote {\n      reportId\n      mediaId\n      note\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerReportAccount {\n    getModerReportAccount {\n      reportId\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n"): (typeof documents)["\n  query getModerReportAccount {\n    getModerReportAccount {\n      reportId\n      reportedUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      informerUser {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerReportMedia {\n    getModerReportMedia {\n      report\n      reportId\n      createdType\n      informer {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getModerReportMedia {\n    getModerReportMedia {\n      report\n      reportId\n      createdType\n      informer {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerMedia {\n    getModerMedia {\n      report\n      createdType\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      searchMedia {\n        ... on FilmBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getModerMedia {\n    getModerMedia {\n      report\n      createdType\n      creator {\n        id\n        name\n        picture\n        warnings\n        canSendReport\n        isBanned\n        note\n      }\n      searchMedia {\n        ... on FilmBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n        ... on SeriesBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          title\n          startYear\n          endYear\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          title\n          year\n          image\n        }\n      }\n      media {\n        ... on FilmBaseResponse {\n          id\n          media\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesModerResponse {\n          id\n          media\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            id\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsBaseResponse {\n          id\n          media\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookBaseResponse {\n          id\n          media\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getModerMediaCount {\n    getModerMediaCount {\n      reportsCount {\n        note\n        account\n        media\n      }\n      mediaCount\n    }\n  }\n"): (typeof documents)["\n  query getModerMediaCount {\n    getModerMediaCount {\n      reportsCount {\n        note\n        account\n        media\n      }\n      mediaCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query gptTitleParse($input: QueryInput!) {\n    gptTitleParse(queryInput: $input) {\n      title\n      year\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n"): (typeof documents)["\n  query gptTitleParse($input: QueryInput!) {\n    gptTitleParse(queryInput: $input) {\n      title\n      year\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query wikiMediaParse($input: QueryInput!) {\n    wikiMediaParse(queryInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query wikiMediaParse($input: QueryInput!) {\n    wikiMediaParse(queryInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          seasons {\n            season\n            title\n            episodes\n          }\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query imageParse($input: ImagesInput!) {\n    imageParse(imagesInput: $input) {\n      links\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n"): (typeof documents)["\n  query imageParse($input: ImagesInput!) {\n    imageParse(imagesInput: $input) {\n      links\n      mediaTokens\n      additionalMediaTokens\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query gptMediaParse($input: GptInput!) {\n    gptMediaParse(gptInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gptMediaParse($input: GptInput!) {\n    gptMediaParse(gptInput: $input) {\n      mediaTokens\n      additionalMediaTokens\n      media {\n        ... on FilmParseResponse {\n          filmType\n          title\n          year\n          country\n          plot\n          language\n          directedBy\n          starring\n          runTime\n          boxOffice\n          budget\n          genres\n          tags\n          image\n        }\n        ... on SeriesParseResponse {\n          seriesType\n          title\n          startYear\n          endYear\n          country\n          plot\n          language\n          directedBy\n          genres\n          tags\n          image\n        }\n        ... on ComicsParseResponse {\n          comicsType\n          title\n          author\n          startYear\n          endYear\n          country\n          description\n          language\n          volumes\n          genres\n          tags\n          image\n        }\n        ... on BookParseResponse {\n          bookType\n          title\n          author\n          year\n          country\n          description\n          language\n          pages\n          genres\n          tags\n          image\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation updateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation setAllWatchedNotifications {\n    setAllWatchedNotifications {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation setAllWatchedNotifications {\n    setAllWatchedNotifications {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserNotifications {\n    getUserNotifications {\n      id\n      type\n      notification\n      isWatched\n      createdAt\n      follower {\n        id\n        name\n        picture\n        follow\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUserNotifications {\n    getUserNotifications {\n      id\n      type\n      notification\n      isWatched\n      createdAt\n      follower {\n        id\n        name\n        picture\n        follow\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;